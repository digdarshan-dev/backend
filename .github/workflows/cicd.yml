name: CI/CD Pipeline for Lerna Backend

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Install Lerna
        run: npm install -g lerna@7

      - name: Install Microservice Dependencies
        run: npx lerna exec -- npm install

      # Uncomment to run tests once test cases are added
      # - name: Run Tests
      #   run: npx lerna run test --stream

  docker-build-and-deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/backend:latest

      - name: Setup SSH Key for EC2
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/backend:latest || { echo "Docker pull failed"; exit 1; }

            echo "Stopping old container..."
            docker stop backend || true

            echo "Removing old container..."
            docker rm backend || true

            echo "Running new container..."
            docker run -d --name backend -p 5001:5001 -p 5002:5002 \
              -e NODE_ENV=production \
              -e SUPABASE_URL=${{ secrets.SUPABASE_URL }} \
              -e SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }} \
              ${{ secrets.DOCKER_USERNAME }}/backend:latest || { echo "Docker run failed"; exit 1; }

            echo "Deployment completed successfully!"
